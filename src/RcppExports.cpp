// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ct_algorithm
Rcpp::List ct_algorithm(const arma::mat& R, const Rcpp::Nullable<Rcpp::NumericVector> tau, const int k);
RcppExport SEXP _fact_ct_algorithm(SEXP RSEXP, SEXP tauSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector> >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(ct_algorithm(R, tau, k));
    return rcpp_result_gen;
END_RCPP
}
// ct_structure
arma::umat ct_structure(arma::mat const& R, double const& tau, int const k, bool const check);
RcppExport SEXP _fact_ct_structure(SEXP RSEXP, SEXP tauSEXP, SEXP kSEXP, SEXP checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type R(RSEXP);
    Rcpp::traits::input_parameter< double const& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int const >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool const >::type check(checkSEXP);
    rcpp_result_gen = Rcpp::wrap(ct_structure(R, tau, k, check));
    return rcpp_result_gen;
END_RCPP
}
// pare_tau
arma::vec pare_tau(arma::mat const& R, arma::vec const& tau);
RcppExport SEXP _fact_pare_tau(SEXP RSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(pare_tau(R, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fact_ct_algorithm", (DL_FUNC) &_fact_ct_algorithm, 3},
    {"_fact_ct_structure", (DL_FUNC) &_fact_ct_structure, 4},
    {"_fact_pare_tau", (DL_FUNC) &_fact_pare_tau, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fact(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
